// Another MDP in the "frozen lake" style.

mdp



module grid
  r : [0..5] init 5;
  c : [0..5] init 0;

  [n] r<5 & c>0 & c<5 ->  2/3 : (r'=r+1) & (c'=c) +
                          1/6 : (r'=r) & (c'=c-1) + 
                          1/6 : (r'=r) & (c'=c+1);
                          
  [n] r<5 & c=0         -> 2/3 : (r'=r+1) & (c'=c) +
                             1/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c+1);

  [n] r<5 & c=5       -> 2/3 : (r'=r+1) & (c'=c) +
                             1/6 : (r'=r) & (c'=c-1) + 
                             1/6 : (r'=r) & (c'=c);

  [n] r=5 & c>0 & c<5 -> 2/3 : (r'=r) & (c'=c) +
                             1/6 : (r'=r) & (c'=c-1) + 
                             1/6 : (r'=r) & (c'=c+1);

  [n] r=5 & c=0         -> 5/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c+1);

  [n] r=5 & c=5       -> 5/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c-1);

  [e] r>0 & r<5 & c<5 -> 2/3 : (r'=r) & (c'=c+1) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [e] r=0 & c<5         -> 2/3 : (r'=r) & (c'=c+1) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c);

  [e] r=5 & c<5       -> 2/3 : (r'=r) & (c'=c+1) +
                             1/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [e] r>0 & r<5 & c=5 -> 2/3 : (r'=r) & (c'=c) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [e] r=0 & c=5         -> 5/6 : (r'=r) & (c'=c) + 
                            1/6 : (r'=r+1) & (c'=c);

  [e] r=5 & c=5       -> 5/6 : (r'=r) & (c'=c) + 
                            1/6 : (r'=r-1) & (c'=c);

  [s] r>0 & c>0 & c<5   -> 2/3 : (r'=r-1) & (c'=c) +
                             1/6 : (r'=r) & (c'=c-1) + 
                             1/6 : (r'=r) & (c'=c+1);

  [s] r>0 & c=0           -> 2/3 : (r'=r-1) & (c'=c) +
                             1/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c+1);

  [s] r>0 & c=5         -> 2/3 : (r'=r-1) & (c'=c) +
                             1/6 : (r'=r) & (c'=c-1) + 
                             1/6 : (r'=r) & (c'=c);

  [s] r=0 & c>0 & c<5   -> 2/3 : (r'=r) & (c'=c) +
                             1/6 : (r'=r) & (c'=c-1) + 
                             1/6 : (r'=r) & (c'=c+1);

  [s] r=0 & c=0           -> 5/6 : (r'=r) & (c'=c) + 
                              1/6 : (r'=r) & (c'=c+1);

  [s] r=0 & c=5         -> 5/6 : (r'=r) & (c'=c) + 
                              1/6 : (r'=r) & (c'=c-1);

  [w] r>0 & r<5 & c>0   -> 2/3 : (r'=r) & (c'=c-1) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [w] r=0 & c>0           -> 2/3 : (r'=r) & (c'=c-1) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r) & (c'=c);

  [w] r=5 & c>0         -> 2/3 : (r'=r) & (c'=c-1) +
                             1/6 : (r'=r) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [w] r>0 & r<5 & c=0   -> 2/3 : (r'=r) & (c'=c) +
                             1/6 : (r'=r+1) & (c'=c) + 
                             1/6 : (r'=r-1) & (c'=c);

  [w] r=0 & c=0           -> 5/6 : (r'=r) & (c'=c) + 
                              1/6 : (r'=r+1) & (c'=c);

  [w] r=5 & c=0         -> 5/6 : (r'=r) & (c'=c) + 
                              1/6 : (r'=r-1) & (c'=c);
endmodule
